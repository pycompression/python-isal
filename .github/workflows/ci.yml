name: Continous integration

on:
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '*.rst'
  push:
    branches:
      - develop
      - main
    tags:
      - "*"

jobs:
#  lint:
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v2.3.4
#        with:
#          submodules: recursive
#      - name: Set up Python 3.6
#        uses: actions/setup-python@v2.2.1
#        with:
#          python-version: 3.6
#      - name: Install tox
#        run: pip install tox
#      - name: Lint
#        run: tox -e lint
#
#  package-checks:
#    strategy:
#      matrix:
#        tox_env:
#          - docs
#          - twine_check
#    needs: lint
#    runs-on: ubuntu-20.04
#    steps:
#      - uses: actions/checkout@v2.3.4
#        with:
#          submodules: recursive
#      - name: Set up Python 3.6
#        uses: actions/setup-python@v2.2.1
#        with:
#          python-version: 3.6
#      - name: Install isal
#        run: sudo apt-get install libisal-dev
#      - name: Install tox and upgrade setuptools and pip
#        run: pip install --upgrade tox setuptools pip
#      - name: Run tox -e ${{ matrix.tox_env }}
#        run: tox -e ${{ matrix.tox_env }}
#        env:
#          PYTHON_ISAL_LINK_DYNAMIC: True
#
#  test-static:
#    needs: lint
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        python-version:
#          - "3.6"
#          - "3.7"
#          - "3.8"
#          - "3.9"
#          - "pypy-3.6"
#          - "pypy-3.7"
#        os: ["ubuntu-latest"]
#        include:
#          - os: "macos-latest"
#            python-version: 3.6
#          - os: "windows-latest"
#            python-version: 3.6
#    steps:
#      - uses: actions/checkout@v2.3.4
#        with:
#          submodules: recursive
#      - name: Set up Python ${{ matrix.python-version }}
#        uses: actions/setup-python@v2.2.1
#        with:
#          python-version: ${{ matrix.python-version }}
#      - name: Install tox and upgrade setuptools
#        run: pip install --upgrade tox setuptools
#      - name: Install build dependencies (Linux)  # Yasm in pypa/manylinux images.
#        run: sudo apt install yasm
#        if: runner.os == 'Linux'
#      - name: Install build dependencies (Macos)
#        # Install yasm because nasm does not work when building wheels.
#        # Probably because of nasm-filter.sh not filtering all flags that can not be used.
#        run: brew install yasm automake autoconf
#        if: runner.os == 'macOS'
#      - name: Set MSVC developer prompt
#        uses: ilammy/msvc-dev-cmd@v1.6.0
#        if: runner.os == 'Windows'
#      - name: Install nasm (Windows)
#        uses: ilammy/setup-nasm@v1.2.0
#        if: runner.os == 'Windows'
#      - name: Run tests
#        run: tox
#      - name: Upload coverage report
#        uses: codecov/codecov-action@v1
#
#  test-arch:
#    if: startsWith(github.ref, 'refs/tags') || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
#    runs-on: "ubuntu-latest"
#    needs: lint
#    strategy:
#      matrix:
#        distro: [ "ubuntu20.04" ]
#        arch: ["aarch64"]
#    steps:
#      - uses: actions/checkout@v2.3.4
#        with:
#          submodules: recursive
#      - uses: uraimo/run-on-arch-action@v2.0.9
#        name: Build & run test
#        with:
#          arch: ${{ matrix.arch }}
#          distro: ${{ matrix.distro }}
#          install: |
#            apt-get update -q -y
#            apt-get install -q -y python3 python3-pip gcc binutils automake autoconf libtool
#          run: |
#            python3 -m pip install -U setuptools pip wheel tox
#            tox
#
#  # Test if the python-isal conda package can be build. Which is linked
#  # dynamically to the conda isa-l package.
#  test-dynamic:
#    runs-on: ${{ matrix.os }}
#    defaults:
#      run:
#        # This is needed for miniconda, see:
#        # https://github.com/marketplace/actions/setup-miniconda#important.
#        shell: bash -l {0}
#    needs: lint
#    strategy:
#      matrix:
#        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
#        python_version: ["python"]
#        include:
#          - os: "ubuntu-latest"
#            python_version: "pypy"
#    steps:
#      - uses: actions/checkout@v2.3.4
#        with:
#          submodules: recursive
#      - name: Install miniconda.
#        uses: conda-incubator/setup-miniconda@v2.0.1 # https://github.com/conda-incubator/setup-miniconda.
#        with:
#          channels: conda-forge,defaults
#      - name: Install requirements (universal)
#        run: conda install isa-l ${{ matrix.python_version}} tox
#      - name: Set MSVC developer prompt
#        uses: ilammy/msvc-dev-cmd@v1.6.0
#        if: runner.os == 'Windows'
#      - name: Run tests (dynamic link)
#        run: tox
#        env:
#          PYTHON_ISAL_LINK_DYNAMIC: True

  deploy:
#    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ${{ matrix.os }}
#    needs: [lint, package-checks, test-static, test-dynamic, test-arch]
    strategy:
      matrix:
        os: ["macos-latest", "ubuntu-latest", "windows-latest"]
        cibw_archs_linux: ["x86_64"]
        build_sdist: [true]
        include:
          - os: "ubuntu-latest"
            cibw_archs_linux: "aarch64"
            build_sdist: false
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: recursive
      - uses: actions/setup-python@v2
        name: Install Python
      - name: Install cibuildwheel twine wheel
        run: python -m pip install cibuildwheel twine wheel
      - name: Install build dependencies (Macos)
        run: brew install yasm automake autoconf
        if: runner.os == 'macOS'
      - name: Set MSVC developer prompt
        uses: ilammy/msvc-dev-cmd@v1.6.0
        if: runner.os == 'Windows'
      - name: Install nasm (Windows)
        uses: ilammy/setup-nasm@v1.2.0
        if: runner.os == 'Windows'
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v1.0.1
        with:
          platforms: arm64
      - name: Build wheels
        run: cibuildwheel --output-dir dist
        env:
          CIBW_SKIP: "*-win32 *-manylinux_i686"  # Skip 32 bit.
          CIBW_ARCHS_LINUX: ${{ matrix.cibw_archs_linux }}
          # Fully test the build wheels again.
          CIBW_TEST_REQUIRES: "pytest"
          # Simple test that requires the project to be build correctly
          CIBW_TEST_COMMAND: >-
            pytest {project}/tests/test_igzip.py
            {project}/tests/test_compat.py
            {project}/tests/test_igzip_lib.py
          CIBW_ENVIRONMENT_LINUX: >-
            PYTHON_ISAL_BUILD_CACHE=True
            PYTHON_ISAL_BUILD_CACHE_FILE=/tmp/build_cache
          CIBW_ENVIRONMENT_WINDOWS: >-
            PYTHON_ISAL_BUILD_CACHE=True
            PYTHON_ISAL_BUILD_CACHE_FILE=${{ env.RUNNER_TEMP }}\build_cache
          CIBW_ENVIRONMENT_MACOS: >-
            PYTHON_ISAL_BUILD_CACHE=True
            PYTHON_ISAL_BUILD_CACHE_FILE=${{ env.RUNNER_TEMP }}\build_cache
      - name: Build sdist
        if: "runner.os == 'Linux' and ${{ matrix.build_sdist }}"
        run: bash -c 'pip install cython && python setup.py sdist'
      - uses: actions/upload-artifact@v2
        with:
          name: "dist"
          path: "dist/"
      - name: Publish package to TestPyPI
        # pypa/gh-action-pypi-publish@master does not work on OSX
        # Alpha, Beta and dev releases contain a - in the tag.
        if: contains(github.ref, '-') && startsWith(github.ref, 'refs/tags')
        run: twine upload --repository-url https://test.pypi.org/legacy/ dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Publish package to PyPI
        if: "!contains(github.ref, '-') && startsWith(github.ref, 'refs/tags')"
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}