name: Continous integration

on:
  pull_request:
  push:
    branches:
      - develop
      - main
    tags:
      - "*"

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: recursive
      - name: Set up Python 3.6
        uses: actions/setup-python@v2.2.1
        with:
          python-version: 3.6
      - name: Install tox
        run: pip install tox
      - name: Lint
        run: tox -e lint

  package-checks:
    strategy:
      matrix:
        tox_env:
          - docs
          - mypy
          - twine_check
    needs: lint
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: recursive
      - name: Set up Python 3.6
        uses: actions/setup-python@v2.2.1
        with:
          python-version: 3.6
      - name: Install isal
        run: sudo apt-get install libisal-dev
      - name: Install tox and upgrade setuptools and pip
        run: pip install --upgrade tox setuptools pip
      - name: Run tox -e ${{ matrix.tox_env }}
        run: tox -e ${{ matrix.tox_env }}
        env:
          PYTHON_ISAL_LINK_DYNAMIC: True

  test-static:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version:
          - 3.6
          - 3.7
          - 3.8
          - 3.9
        os: ["ubuntu-latest"]
        include:
          - os: "macos-latest"
            python-version: 3.6
          - os: "windows-latest"
            python-version: 3.6
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: recursive
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2.2.1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install tox and upgrade setuptools
        run: pip install --upgrade tox setuptools
      - name: Install build dependencies (Linux)  # Yasm in pypa/manylinux images.
        run: sudo apt install yasm
        if: runner.os == 'Linux'
      - name: Install build dependencies (Macos)
        run: brew install nasm automake autoconf
        if: runner.os == 'macOS'
      - name: Set MSVC developer prompt
        uses: ilammy/msvc-dev-cmd@v1.6.0
        if: runner.os == 'Windows'
      - name: Install nasm (Windows)
        uses: ilammy/setup-nasm@v1.2.0
        if: runner.os == 'Windows'
      - name: Run tests
        run: tox -e py3
      - name: Upload coverage report
        uses: codecov/codecov-action@v1

  # Test if the python-isal conda package can be build. Which is linked
  # dynamically to the conda isa-l package.
  test-dynamic:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        # This is needed for miniconda, see:
        # https://github.com/marketplace/actions/setup-miniconda#important.
        shell: bash -l {0}
    needs: lint
    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: recursive
      - name: Install miniconda.
        uses: conda-incubator/setup-miniconda@v2.0.1 # https://github.com/conda-incubator/setup-miniconda.
        with:
          channels: conda-forge,defaults
      - name: Install requirements (universal)
        run: conda install isa-l python tox
      - name: Set MSVC developer prompt
        uses: ilammy/msvc-dev-cmd@v1.6.0
        if: runner.os == 'Windows'
      - name: Run tests (dynamic link)
        run: tox -e py3
        env:
          PYTHON_ISAL_LINK_DYNAMIC: True

  deploy:
    #if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ${{ matrix.os }}
    #needs: [lint, package-checks, test-static, test-dynamic]
    strategy:
      matrix:
        os: ["macos-latest"]
        #os: ["macos-latest", "ubuntu-latest", "windows-latest"]
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          submodules: recursive
      - uses: actions/setup-python@v2
        name: Install Python
      - name: Install cibuildwheel twine wheel
        run: python -m pip install cibuildwheel twine wheel
      - name: Install build dependencies (Macos)
        run: brew install nasm automake autoconf
        if: runner.os == 'macOS'
      - name: Set MSVC developer prompt
        uses: ilammy/msvc-dev-cmd@v1.6.0
        if: runner.os == 'Windows'
      - name: Install nasm (Windows)
        uses: ilammy/setup-nasm@v1.2.0
        if: runner.os == 'Windows'
      - name: Build wheels
        run: cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp3{6,7,8,9}-*"
          CIBW_SKIP: "*-win32 *-manylinux_i686"  # Skip 32 bit.
          CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
          # Fully test the build wheels again.
          CIBW_TEST_REQUIRES: "pytest"
          # Simple test that requires the project to be build correctly
          CIBW_TEST_COMMAND: "pytest {project}/tests/test_igzip.py"
      - name: Build sdist
        if: "runner.os == 'Linux'"
        run: python setup.py sdist
      - name: Publish package to TestPyPI
        # pypa/gh-action-pypi-publish@master does not work on OSX
        # Alpha, Beta and dev releases contain a - in the tag.
        if: contains(github.ref, '-') && startsWith(github.ref, 'refs/tags')
        run: twine upload --repository-url https://test.pypi.org/legacy/ dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Publish package to PyPI
        if: "!contains(github.ref, '-') && startsWith(github.ref, 'refs/tags')"
        run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}